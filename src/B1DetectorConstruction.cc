//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file B1DetectorConstruction.cc
/// \brief Implementation of the B1DetectorConstruction class

#include "B1DetectorConstruction.hh"

#include "G4Material.hh"
#include "G4Element.hh"
#include "G4RunManager.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4Cons.hh"
#include "G4Orb.hh"
#include "G4Sphere.hh"
#include "G4Trd.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1DetectorConstruction::B1DetectorConstruction()
: G4VUserDetectorConstruction(),
  fScoringVolume1(0),
  fScoringVolume2(0),
  fScintiLogical1(nullptr),
  fScintiLogical2(nullptr),
  fQuartzLogical1(nullptr),
  fQuartzLogical2(nullptr),
  fCherenkovLogical(nullptr)
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1DetectorConstruction::~B1DetectorConstruction()
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* B1DetectorConstruction::Construct()
{
  ConstructMaterials();
  G4Material *air = G4Material::GetMaterial("G4_AIR");
  G4Material *scintillator = G4Material::GetMaterial("G4_PLASTIC_SC_VINYLTOLUENE");
  G4MaterialPropertiesTable *scintillatorProperties = new G4MaterialPropertiesTable();
  scintillatorProperties->AddConstProperty("SCINTILLATIONYIELD",10000./MeV);
  scintillator->SetMaterialPropertiesTable(scintillatorProperties);

  G4Element *elO  = new G4Element("Oxygen", "O", 8., 16.00*g/mole);
  G4Element *elSi = new G4Element("Silicon", "Si", 14., 28.09*g/mole);
  G4Element *elAl  = new G4Element("Aluminum", "Al", 13., 26.98*g/mole);

  // Quartz definition (SiO2)
  G4double quartzDensity = 2.200*g/cm3; // fused quartz
  //density = 2.64*g/cm3;  // crystalline quartz (c.f. PDG)
  G4Material *quartz = new G4Material("quartz", quartzDensity, 2);
  quartz->AddElement(elSi, 1);
  quartz->AddElement(elO , 2);

  // Sapphire definition (Al2O3)
  G4double sapphireDensity = 3.98*g/cm3;
  G4double sapphireRefractiveIndex = 1.76;
  G4Material *sapphire = new G4Material("sapphire", sapphireDensity, 2);
  sapphire->AddElement(elAl, 2);
  sapphire->AddElement(elO , 3);
  // sapphire refractive index for all photon momenta


  const G4int nCherenkovMomenta = 424;
  G4double pCherenkov[nCherenkovMomenta] = {0.068868626025162*eV,0.069822710724278*eV,0.07077935002175*eV,0.071737654014407*eV,0.072692417585073*eV,0.073651055859035*eV,0.074608368897039*eV,0.075563254164493*eV,0.076519278795964*eV,0.077475590472474*eV,0.078431292657578*eV,0.079390527907473*eV,0.080347474196812*eV,0.081301106513508*eV,0.082261270855294*eV,0.083216449045641*eV,0.08417120667556*eV,0.08513058736137*eV,0.086082196370964*eV,0.087043097046546*eV,0.088000700853928*eV,0.088954073348472*eV,0.089908765361204*eV,0.090864190130524*eV,0.091826534908236*eV,0.092781701289456*eV,0.09373568264391*eV,0.094695018279309*eV,0.095652050172118*eV,0.096606036647265*eV,0.09756388686898*eV,0.098517431412872*eV,0.099473834590099*eV,0.10043271562017*eV,0.101385385095347*eV,0.102347851604012*eV,0.103302939037743*eV,0.104258482537084*eV,0.10521400834445*eV,0.106169025032625*eV,0.107132279817765*eV,0.108084898817104*eV,0.109045019730079*eV,0.109993069049947*eV,0.110957747837032*eV,0.111909186238018*eV,0.112866806948657*eV,0.11382005639686*eV,0.114778918193945*eV,0.1157324628331*eV,0.116690999937035*eV,0.11765438169776*eV,0.118611104403616*eV,0.119560450755159*eV,0.120513401470742*eV,0.121469763332125*eV,0.122429334880122*eV,0.123391906282942*eV,0.124344787316317*eV,0.12530110201528*eV,0.126258095737329*eV,0.127214154824083*eV,0.128171552038187*eV,0.129127328944978*eV,0.130083817642349*eV,0.131040730785922*eV,0.131996366904184*eV,0.132953211050571*eV,0.133909564342139*eV,0.134866571051223*eV,0.135822474292428*eV,0.136779951936786*eV,0.137735721908438*eV,0.138692530268024*eV,0.139648567217936*eV,0.140605118489776*eV,0.141561932604615*eV,0.142518751000747*eV,0.143475308028814*eV,0.14443133095663*eV,0.145388244838176*eV,0.14634410291793*eV,0.147300361684071*eV,0.148256788914119*eV,0.149214941970971*eV,0.150171007767617*eV,0.151126508328986*eV,0.152083052147956*eV,0.153040446630335*eV,0.153996581129411*eV,0.154953117495813*eV,0.155909846752637*eV,0.156866554610567*eV,0.157823021465522*eV,0.158779022402351*eV,0.159736385159499*eV,0.160692865665794*eV,0.161648223511212*eV,0.162604345543023*eV,0.163561056202393*eV,0.164518175516971*eV,0.165475519089635*eV,0.166430663972696*eV,0.16738785936695*eV,0.168344699090415*eV,0.169300981023718*eV,0.170256498631045*eV,0.171213405279431*eV,0.172169174222848*eV,0.173126003537108*eV,0.17408374978321*eV,0.175039794772278*eV,0.175996405003903*eV,0.176953425959952*eV,0.177908146696943*eV,0.178865483839606*eV,0.179822746755671*eV,0.180779766754297*eV,0.181733707742403*eV,0.182692385519929*eV,0.183647629211251*eV,0.18460466846297*eV,0.185560625348868*eV,0.186518116277435*eV,0.187474200007711*eV,0.188431544170187*eV,0.189387143605993*eV,0.190343717753504*eV,0.19130114862153*eV,0.192256334309882*eV,0.19321207329453*eV,0.194168239159802*eV,0.195124702842416*eV,0.196081332626559*eV,0.197037994140709*eV,0.197994550356276*eV,0.198950861588119*eV,0.199910008760238*eV,0.20086543124034*eV,0.201820173901811*eV,0.202777402863941*eV,0.203733711438642*eV,0.204692323773918*eV,0.205646355005971*eV,0.206602435275366*eV,0.207560497259684*eV,0.208516965074167*eV,0.209475210233662*eV,0.210431588168672*eV,0.21138592643701*eV,0.212341686675743*eV,0.21329878960397*eV,0.214257154221058*eV,0.215212962043221*eV,0.216169797634207*eV,0.217123771838782*eV,0.218082367257264*eV,0.21903785498039*eV,0.219993944840306*eV,0.220950542526107*eV,0.221907551963595*eV,0.222864875311151*eV,0.223822412956457*eV,0.224775988384669*eV,0.225733613897314*eV,0.226691144082606*eV,0.227648472234544*eV,0.228605489873882*eV,0.229562086750541*eV,0.230518150847076*eV,0.231473568383212*eV,0.232428223821494*eV,0.233386393029704*eV,0.234343635876348*eV,0.23529983191585*eV,0.236254858959012*eV,0.237213131484684*eV,0.238170058653206*eV,0.239125513381357*eV,0.240079366870824*eV,0.241036174487927*eV,0.241995915667525*eV,0.242949047543942*eV,0.24390971717245*eV,0.244863505615001*eV,0.245819908862739*eV,0.246778900565474*eV,0.247735503492916*eV,0.248689574632634*eV,0.249645995959044*eV,0.250604736696244*eV,0.251560661106805*eV,0.25251362002668*eV,0.253473826375066*eV,0.254430920240303*eV,0.255384747946568*eV,0.256340454097008*eV,0.257298000359225*eV,0.259213036384562*eV,0.260170364983946*eV,0.261123791481013*eV,0.262078691623192*eV,0.263035020861125*eV,0.263992733808367*eV,0.264951784235708*eV,0.266862220045415*eV,0.267819128684278*eV,0.268777097776019*eV,0.269736076216904*eV,0.271644948584855*eV,0.272600561613605*eV,0.273556885980848*eV,0.274513865677183*eV,0.27642956263511*eV,0.277388163485468*eV,0.278340938023302*eV,0.279300280311549*eV,0.281213426099707*eV,0.282167017371642*eV,0.283127097881071*eV,0.285034225557726*eV,0.285994158131343*eV,0.287906807154699*eV,0.288866026963723*eV,0.289818109941795*eV,0.291734364180568*eV,0.29269166060694*eV,0.29460422343614*eV,0.295559339753271*eV,0.297473997536169*eV,0.298426292382178*eV,0.300342015535233*eV,0.30129814686051*eV,0.303213958016874*eV,0.304166104295912*eV,0.30608089326067*eV,0.307035951148064*eV,0.308948661715631*eV,0.310861968290793*eV,0.3118157724287*eV,0.313733109221133*eV,0.314688665786187*eV,0.31660117829754*eV,0.318512530013615*eV,0.320430536358255*eV,0.321385731331587*eV,0.323296447022424*eV,0.325212956229933*eV,0.327126427886071*eV,0.328078609809478*eV,0.329990917260459*eV,0.33190787694579*eV,0.333820272564281*eV,0.335727558714053*eV,0.337647569262254*eV,0.339561765489277*eV,0.341469573475171*eV,0.343379919220926*eV,0.345292526340546*eV,0.347207111465176*eV,0.349123384206065*eV,0.351031108247734*eV,0.352949747873775*eV,0.354859004073098*eV,0.356778761569738*eV,0.358688270072035*eV,0.360597351694441*eV,0.363472743200433*eV,0.365379387124922*eV,0.367295258422502*eV,0.369209336925939*eV,0.372079069182821*eV,0.373987051861425*eV,0.375903306045841*eV,0.378774287211987*eV,0.380681591185175*eV,0.383555104201391*eV,0.385475026219064*eV,0.388336478319603*eV,0.39025554747592*eV,0.39312634736857*eV,0.395030228232651*eV,0.397908108196989*eV,0.400776401063808*eV,0.40268988090909*eV,0.40556143872657*eV,0.408420421758078*eV,0.411292710011941*eV,0.414164175017035*eV,0.416082245228202*eV,0.418950420467324*eV,0.421815355469329*eV,0.424690646821606*eV,0.42756116778088*eV,0.431384389663198*eV,0.434255148446989*eV,0.437118133666266*eV,0.439987889680612*eV,0.442863935680453*eV,0.446693282292476*eV,0.449560127028173*eV,0.453373998731487*eV,0.456243560011407*eV,0.460069714769007*eV,0.462938493888058*eV,0.466772786059407*eV,0.469637073610226*eV,0.473475091396547*eV,0.477302846601092*eV,0.48111830591036*eV,0.484938347999764*eV,0.488780995951667*eV,0.492606728249433*eV,0.496433182915314*eV,0.500258987383391*eV,0.504082726594161*eV,0.508861840480606*eV,0.512691508221063*eV,0.5174632196707*eV,0.521292412685418*eV,0.526070041722249*eV,0.529892244777758*eV,0.534691165400637*eV,0.539061684491738*eV,0.543790295759209*eV,0.548602599261503*eV,0.553500836754909*eV,0.558487330779728*eV,0.563564488332271*eV,0.56873480473899*eV,0.574000867745832*eV,0.579365361836915*eV,0.58483107279764*eV,0.59040089253857*eV,0.596077824197595*eV,0.601864987539319*eV,0.607765624672057*eV,0.613783106104454*eV,0.619920937165499*eV,0.626182764813635*eV,0.632572384862754*eV,0.639093749655153*eV,0.645750976214061*eV,0.652548354911051*eV,0.659490358686701*eV,0.666581652866127*eV,0.673827105614672*eV,0.681231799082965*eV,0.688801041294998*eV,0.696540378837639*eV,0.704455610415339*eV,0.712552801339653*eV,0.720838299029649*eV,0.729318749606469*eV,0.738001115673213*eV,0.746892695380119*eV,0.756001142884754*eV,0.765334490327776*eV,0.774901171456873*eV,0.784710047044935*eV,0.79477043226346*eV,0.805092126188959*eV,0.815685443638814*eV,0.826561249553998*eV,0.837730996169593*eV,0.849206763240409*eV,0.861001301618748*eV,0.873128080514787*eV,0.885601338807855*eV,0.898436140819563*eV,0.911648437008086*eV,0.925255130097759*eV,0.939274147220452*eV,0.953724518716152*eV,0.968626464321092*eV,0.984001487564283*eV,0.999872479299191*eV,1.01626383141885*eV,1.0332015619425*eV,1.05071345282288*eV,1.06882920200948*eV,1.08758059151842*eV,1.10700167350982*eV,1.12712897666454*eV,1.14800173549166*eV,1.16966214559528*eV,1.19215564839519*eV,1.21553124934411*eV,1.239841874331*eV,1.26514476972551*eV,1.29150195242812*eV,1.3189807173734*eV,1.34765421122934*eV,1.37760208259*eV,1.40891122083068*eV,1.4416765980593*eV,1.47600223134643*eV,1.51200228576951*eV,1.54980234291375*eV,1.58954086452692*eV,1.63137088727763*eV,1.67546199233919*eV,1.7220026032375*eV,1.77120267761571*eV,1.82329687401617*eV,1.8785482944409*eV,1.93725292864218*eV,1.99974495859838*eV,2.066403123885*eV,2.13765840401896*eV,2.21400334701964*eV,2.29600347098333*eV,2.38431129679038*eV,2.47968374866199*eV,2.58300390485624*eV,2.69530842245869*eV,2.81782244166136*eV,2.95200446269285*eV,3.09960468582749*eV,3.26274177455526*eV,3.44400520647499*eV,3.64659374803234*eV,3.87450585728437*eV,4.13280624776999*eV};
  G4double refractiveIndex[nCherenkovMomenta] = {2.43259,2.41997,2.4053,2.38848,2.36943,2.34808,2.32436,2.29825,2.26973,2.23881,2.20551,2.16987,2.13195,2.09184,2.04962,2.00542,1.95938,1.91161,1.86229,1.81159,1.75969,1.70675,1.65299,1.5986,1.54378,1.48873,1.43366,1.37875,1.32423,1.27028,1.21708,1.16482,1.11369,1.06385,1.01545,0.96867,0.92365,0.88053,0.83946,0.8006,0.76407,0.73004,0.6987,0.67024,0.64491,0.62301,0.60493,0.59116,0.58231,0.57913,0.58242,0.59289,0.6108,0.63567,0.66616,0.70035,0.73636,0.77268,0.80828,0.84254,0.87515,0.90598,0.93501,0.9623,0.98791,1.01195,1.03453,1.05574,1.0757,1.0945,1.11222,1.12895,1.14477,1.15975,1.17394,1.18742,1.20023,1.21243,1.22405,1.23514,1.24573,1.25586,1.26556,1.27485,1.28377,1.29233,1.30055,1.30846,1.31607,1.3234,1.33047,1.33728,1.34386,1.35021,1.35634,1.36227,1.36801,1.37356,1.37893,1.38414,1.38919,1.39408,1.39882,1.40342,1.40789,1.41223,1.41644,1.42054,1.42452,1.42839,1.43216,1.43582,1.43939,1.44286,1.44625,1.44954,1.45276,1.45589,1.45894,1.46192,1.46483,1.46767,1.47044,1.47315,1.47579,1.47837,1.48089,1.48336,1.48577,1.48813,1.49044,1.4927,1.4949,1.49707,1.49918,1.50126,1.50329,1.50527,1.50722,1.50913,1.511,1.51284,1.51464,1.5164,1.51813,1.51983,1.5215,1.52313,1.52473,1.52631,1.52786,1.52937,1.53087,1.53233,1.53377,1.53518,1.53657,1.53794,1.53928,1.5406,1.5419,1.54317,1.54443,1.54566,1.54687,1.54807,1.54924,1.5504,1.55153,1.55265,1.55375,1.55484,1.55591,1.55696,1.55799,1.55901,1.56002,1.561,1.56198,1.56294,1.56388,1.56482,1.56573,1.56664,1.56753,1.56841,1.56928,1.57013,1.57097,1.5718,1.57262,1.57343,1.57423,1.57501,1.57579,1.57655,1.57731,1.57805,1.57951,1.58023,1.58093,1.58163,1.58232,1.583,1.58367,1.58498,1.58563,1.58627,1.5869,1.58813,1.58874,1.58933,1.58993,1.59109,1.59166,1.59222,1.59278,1.59387,1.59441,1.59494,1.59598,1.59649,1.5975,1.598,1.59849,1.59945,1.59992,1.60086,1.60131,1.60221,1.60266,1.60353,1.60396,1.6048,1.60522,1.60603,1.60644,1.60723,1.608,1.60839,1.60914,1.60951,1.61024,1.61095,1.61165,1.612,1.61268,1.61335,1.614,1.61432,1.61496,1.61558,1.61619,1.61679,1.61738,1.61796,1.61853,1.61908,1.61963,1.62017,1.6207,1.62122,1.62172,1.62223,1.62272,1.6232,1.62368,1.62437,1.62483,1.62528,1.62572,1.62636,1.62679,1.6272,1.62781,1.62821,1.6288,1.62918,1.62975,1.63012,1.63066,1.63101,1.63153,1.63205,1.63238,1.63287,1.63335,1.63382,1.63428,1.63458,1.63503,1.63546,1.63589,1.6363,1.63685,1.63724,1.63763,1.63801,1.63839,1.63887,1.63923,1.6397,1.64004,1.64048,1.64081,1.64123,1.64155,1.64195,1.64235,1.64274,1.64312,1.64349,1.64385,1.6442,1.64455,1.64489,1.6453,1.64562,1.64601,1.64632,1.64669,1.64698,1.64733,1.64765,1.64799,1.64832,1.64865,1.64898,1.6493,1.64962,1.64994,1.65026,1.65057,1.65089,1.6512,1.6515,1.65181,1.65211,1.65241,1.65271,1.65301,1.6533,1.6536,1.65389,1.65418,1.65446,1.65475,1.65503,1.65531,1.65559,1.65587,1.65615,1.65642,1.6567,1.65697,1.65724,1.65751,1.65778,1.65805,1.65832,1.65859,1.65886,1.65912,1.65939,1.65965,1.65992,1.66019,1.66045,1.66072,1.66099,1.66125,1.66152,1.6618,1.66207,1.66234,1.66262,1.6629,1.66318,1.66347,1.66376,1.66405,1.66435,1.66465,1.66496,1.66528,1.66561,1.66594,1.66628,1.66663,1.66699,1.66737,1.66776,1.66816,1.66858,1.66902,1.66948,1.66996,1.67047,1.67101,1.67158,1.67219,1.67283,1.67353,1.67427,1.67507,1.67594,1.67689,1.67792,1.67906,1.68031,1.68169,1.68324,1.68496,1.68691,1.68912,1.69164,1.69454,1.69791,1.70185,1.70652,1.7121,1.71886,1.72717,1.73756};
  /*for (G4int i=0; i<nCherenkovMomenta; i++) {
    pCherenkov[i] = (float)(i+1)*eV;
    refractiveIndex[i] = sapphireRefractiveIndex;
    }*/
  G4MaterialPropertiesTable *sapphireProperties = new G4MaterialPropertiesTable();
  sapphireProperties->AddProperty("RINDEX", pCherenkov, refractiveIndex,
				  nCherenkovMomenta)->SetSpline(true);
  sapphire->SetMaterialPropertiesTable(sapphireProperties);
     
  // Get nist material manager
  G4NistManager* nist = G4NistManager::Instance();

  // Envelope parameters
  //
  G4double env_sizeXY = 10*cm, env_sizeZ = 50*cm;
  
  // Option to switch on/off checking of volumes overlaps
  //
  G4bool checkOverlaps = true;

  //     
  // World
  //
  G4double world_sizeXY = 1.2*env_sizeXY;
  G4double world_sizeZ  = 1.2*env_sizeZ;
  G4Material* world_mat = nist->FindOrBuildMaterial("G4_AIR");

  G4Box* solidWorld = new G4Box("World", 0.5*world_sizeXY, 0.5*world_sizeXY, 0.5*world_sizeZ);
  G4LogicalVolume* logicWorld = new G4LogicalVolume(solidWorld, world_mat, "World");
  G4VPhysicalVolume* physWorld = new G4PVPlacement(0, G4ThreeVector(), logicWorld, "World", 0, false, 0, checkOverlaps);

  //     
  // Envelope
  //
  G4Material* env_mat = nist->FindOrBuildMaterial("G4_AIR");
  G4Box* solidEnv = new G4Box("Envelope", 0.5*env_sizeXY, 0.5*env_sizeXY, 0.5*env_sizeZ);
  G4LogicalVolume* logicEnv = new G4LogicalVolume(solidEnv, env_mat, "Envelope");
  new G4PVPlacement(0, G4ThreeVector(), logicEnv, "Envelope", logicWorld, false, 0, checkOverlaps);

  G4double scintSizeX = 3.*cm;
  G4double scintSizeY = 3.*cm;
  G4double scintSizeZ = 1.*cm;

  G4double scint1Z = -15*cm;
  G4double scint2Z = 15*cm;
  
  //
  // Scintillator 1
  //
  G4Box *scintiSolid1 = new G4Box("ScintiBox1", scintSizeX, scintSizeY, scintSizeZ);
  fScintiLogical1 = new G4LogicalVolume(scintiSolid1, scintillator, "ScintiLogical1");
  new G4PVPlacement(0, G4ThreeVector(0.,0.,scint1Z), fScintiLogical1, "ScintiPhysical1", logicEnv, false, 0, checkOverlaps);

  //
  // Scintillator 2
  //
  G4Box *scintiSolid2 = new G4Box("ScintiBox2", scintSizeX, scintSizeY, scintSizeZ);
  fScintiLogical2 = new G4LogicalVolume(scintiSolid2, scintillator, "ScintiLogical2");
  new G4PVPlacement(0, G4ThreeVector(0.,0.,scint2Z), fScintiLogical2, "ScintiPhysical2", logicEnv, false, 0, checkOverlaps);

  //
  // Quartz windows
  //
  G4double quartzWindowRadius = 25.4*mm;
  G4double quartzWindowThickness = 5.*mm;
  G4double ftmRadius = 7.5*cm;
  G4double quartz1Z = -ftmRadius/2.;
  G4double quartz2Z = ftmRadius/2.;
    
  //
  // Quartz window 1
  //
  G4Tubs *quartzSolid1 = new G4Tubs("QuartzTub1", 0, quartzWindowRadius, quartzWindowThickness/2., 0, 2*CLHEP::pi);
  fQuartzLogical1 = new G4LogicalVolume(quartzSolid1, quartz, "QuartzLogical1");
  new G4PVPlacement(0, G4ThreeVector(0.,0.,quartz1Z), fQuartzLogical1, "QuartzPhysical1", logicEnv, false, 0, checkOverlaps);

  //
  // Quartz window 2
  //
  G4Tubs *quartzSolid2 = new G4Tubs("QuartzTub2", 0, quartzWindowRadius, quartzWindowThickness/2., 0, 2*CLHEP::pi);
  fQuartzLogical2 = new G4LogicalVolume(quartzSolid2, quartz, "QuartzLogical2");
  new G4PVPlacement(0, G4ThreeVector(0.,0.,quartz2Z), fQuartzLogical2, "QuartzPhysical2", logicEnv, false, 0, checkOverlaps);

  //
  // Cherenkov radiator
  //
  G4double cherenkovRadiatorLength = 3.*cm;
  G4double cherenkovRadiatorThickness = 1.27*mm;
  G4double cherenkovRadiatorZ = 8.*cm;

  G4Box *cherenkovSolid = new G4Box("CherenkovBox", cherenkovRadiatorLength, cherenkovRadiatorLength, cherenkovRadiatorThickness);
  fCherenkovLogical = new G4LogicalVolume(cherenkovSolid, sapphire, "CherenkovLogical");
  new G4PVPlacement(0, G4ThreeVector(0.,0.,cherenkovRadiatorZ), fCherenkovLogical, "CherenkovPhysical", logicEnv, false, 0, checkOverlaps);
  
  // Set scintillators as scoring volumes
  //
  fScoringVolume1 = fScintiLogical1;
  fScoringVolume2 = fScintiLogical2;

  //
  //always return the physical World
  //
  return physWorld;
}

void B1DetectorConstruction::ConstructMaterials() {
   auto nistManager = G4NistManager::Instance();

   // Air 
   nistManager->FindOrBuildMaterial("G4_AIR");

   // Argon gas
   nistManager->FindOrBuildMaterial("G4_Ar");
   // With a density different from the one defined in NIST
   // G4double density = 1.782e-03*g/cm3; 
   // nistManager->BuildMaterialWithNewDensity("B5_Ar","G4_Ar",density);
   // !! cases segmentation fault

   // Scintillator
   // (PolyVinylToluene, C_9H_10)
   nistManager->FindOrBuildMaterial("G4_PLASTIC_SC_VINYLTOLUENE");

   // Vacuum "Galactic"
   // nistManager->FindOrBuildMaterial("G4_Galactic");

   // Vacuum "Air with low density"
   // auto air = G4Material::GetMaterial("G4_AIR");
   // G4double density = 1.0e-5*air->GetDensity();
   // nistManager
   //   ->BuildMaterialWithNewDensity("Air_lowDensity", "G4_AIR", density);

   G4cout << G4endl << "The materials defined are: " << G4endl << G4endl;
   G4cout << *(G4Material::GetMaterialTable()) << G4endl;
 }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
